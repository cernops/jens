#!/usr/bin/env python
# Copyright (C) 2014, CERN
# This software is distributed under the terms of the GNU General Public
# Licence version 3 (GPL Version 3), copied verbatim in the file "COPYING".
# In applying this license, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as Intergovernmental Organization
# or submit itself to any jurisdiction.

import sys
import os
import logging
import optparse

import jens.git_wrapper as git
from jens.errors import JensError, JensLockError
from jens.errors import JensConfigError, JensGitError
from jens.settings import Settings
from jens.maintenance import validate_directories
from jens.locks import JensLockFactory
from jens.decorators import timed

def parse_cmdline_args():
    """Parses command line parameters."""
    parser = optparse.OptionParser()
    parser.add_option('-c', '--config',
        help="Configuration file path (defaults to '/etc/jens/main.conf'",
        default="/etc/jens/main.conf")
    parser.add_option('-g', '--aggressive',
        action="store_true",
        help="Do it aggressively")
    parser.add_option('-b', '--bare',
        action="store_true",
        help="Clean up bare repositories")
    parser.add_option('-l', '--clones',
        action="store_true",
        help="Clean up repositories clones")
    parser.add_option('-a', '--all',
        action="store_true",
        help="Clean up everything")
    opts, args = parser.parse_args()
    return opts

@timed
def gc_bares(opts):
    settings = Settings()
    processed = 0
    for partition in ("modules", "hostgroups", "common"):
        base_path = settings.BAREDIR + "/%s" % partition
        for repository in os.listdir(base_path):
            try:
                repository_path = base_path + "/%s" % repository
                git.gc(repository_path, aggressive=opts.aggressive, bare=True)
                processed = processed + 1
            except JensGitError, error:
                logging.error("Failed run git-gc on bare repo %s (%s)" % \
                    (repository, error))
    return processed

@timed
def gc_clones(opts):
    settings = Settings()
    processed = 0
    for partition in ("modules", "hostgroups", "common"):
        base_path = settings.CLONEDIR + "/%s" % partition
        for element in os.listdir(base_path):
            element_path = base_path + "/%s" % element
            for branch in os.listdir(element_path):
                branch_path = element_path + "/%s" % branch
                try:
                    git.gc(branch_path, aggressive=opts.aggressive)
                    processed = processed + 1
                except JensGitError, error:
                    logging.error("Failed run git-gc on clone %s (%s)" % \
                        (branch_path, error))
    return processed

def main():
    """Application entrypoint."""
    opts = parse_cmdline_args()

    settings = Settings("jens-gc")
    try:
        settings.parse_config(opts.config)
    except JensConfigError, error:
        logging.error(error)
        return 2

    try:
        validate_directories()
    except JensError, error:
        logging.error("Failed to validate directories (%s)" % error)
        return 3

    try:
        with JensLockFactory.makeLock(tries=10, waittime=10) as lock:
            if opts.bare or opts.all:
                logging.info("GCing bare repositories...")
                processed_count = gc_bares(opts)
                logging.info("Done (%d repositories cleaned up)" % processed_count)

            if opts.clones or opts.all:
                logging.info("GCing clones...")
                processed_count = gc_clones(opts)
                logging.info("Done (%d repositories cleaned up)" % processed_count)
    except JensLockError, error:
        logging.error("Locking failed (%s)" % error)
        return 50

    logging.info("Done")
    return 0

if __name__ == '__main__':
    sys.exit(main())
