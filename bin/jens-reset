#!/usr/bin/env python
# Copyright (C) 2014, CERN
# This software is distributed under the terms of the GNU General Public
# Licence version 3 (GPL Version 3), copied verbatim in the file "COPYING".
# In applying this license, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as Intergovernmental Organization
# or submit itself to any jurisdiction.

import os
import sys
import optparse
import shutil
import logging

from jens.settings import Settings
from jens.errors import JensConfigError
from jens.errors import JensError, JensLockError
from jens.maintenance import validate_directories
from jens.locks import JensLockFactory

def parse_cmdline_args():
    """Parses command line parameters."""
    parser = optparse.OptionParser()
    parser.add_option('-c', '--config',
        help="Configuration file path (defaults to '/etc/jens/main.conf'",
        default="/etc/jens/main.conf")
    parser.add_option('-y', '--yes',
        action="store_true",
        help="Please do it")
    opts, args = parser.parse_args()
    return opts

def remove_bares():
    settings = Settings()
    for partition in ("modules", "hostgroups", "common"):
        basepath = settings.BAREDIR + "/%s" % partition
        for element in os.listdir(basepath):
            shutil.rmtree(basepath + "/%s" % element)

def remove_clones():
    settings = Settings()
    for partition in ("modules", "hostgroups", "common"):
        basepath = settings.CLONEDIR + "/%s" % partition
        for element in os.listdir(basepath):
            shutil.rmtree(basepath + "/%s" % element)

def remove_environments():
    settings = Settings()
    basepath = settings.ENVIRONMENTSDIR
    for environment in os.listdir(basepath):
        shutil.rmtree(basepath + "/%s" % environment)

def remove_cache():
    remove_environments_cache()
    remove_inventory_cache()

def remove_inventory_cache():
    settings = Settings()
    path = settings.CACHEDIR + "/repositories"
    if os.path.exists(path):
        os.remove(path)

def remove_environments_cache():
    settings = Settings()
    basepath = settings.CACHEDIR + "/environments"
    for environment in os.listdir(basepath):
        os.remove(basepath + "/%s" % environment)

def main():
    """Application entrypoint."""
    opts = parse_cmdline_args()

    settings = Settings()
    try:
        settings.parse_config(opts.config)
    except JensConfigError, error:
        logging.error(error)
        return 2

    try:
        validate_directories()
    except JensError, error:
        logging.error("Failed to validate directories (%s)" % error)
        return 3

    if not opts.yes:
        logging.info("Are you sure about what you're doing? If so add --yes")
        return 10

    try:
        with JensLockFactory.makeLock() as lock:
            logging.info("Cleaning everything up...")
            logging.info("Removing bare repositories...")
            remove_bares()
            logging.info("Removing clones of bare repositories")
            remove_clones()
            logging.info("Removing all Puppet environments...")
            remove_environments()
            logging.info("Removing all environments' cache...")
            remove_cache()
    except JensLockError, error:
        logging.error("Locking failed (%s)" % error)
        return 50

    logging.info("Done -- Jens is sad now")
    return 0

if __name__ == '__main__':
    sys.exit(main())
